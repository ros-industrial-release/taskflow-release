<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classtf_1_1Executor" kind="class" language="C++" prot="public">
    <compoundname>tf::Executor</compoundname>
    <includes refid="executor_8hpp" local="no">executor.hpp</includes>
    <innerclass refid="structtf_1_1Executor_1_1PerThread" prot="private">tf::Executor::PerThread</innerclass>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtf_1_1Executor_1a61184f9bd9c801d0a5eccecfdbddc641" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class FlowBuilder</definition>
        <argsstring></argsstring>
        <name>FlowBuilder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="28" column="3" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classtf_1_1Executor_1aa48945297ede77a161defc88033ce8a6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Subflow</definition>
        <argsstring></argsstring>
        <name>Subflow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="29" column="3" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classtf_1_1Executor_1a9f64f729511a922781a59663ff1c6250" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class cudaFlow</definition>
        <argsstring></argsstring>
        <name>cudaFlow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="30" column="3" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classtf_1_1Executor_1a6a07829c7fbbe077cbb78d7506e85db9" prot="private" static="yes" mutable="no">
        <type>thread_local PerThread</type>
        <definition>thread_local PerThread tf::Executor::_per_thread</definition>
        <argsstring></argsstring>
        <name>_per_thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="193" column="42" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="193" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtf_1_1Executor_1ab052ce8c698583f15216a89ba4c68da4" prot="private" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t tf::Executor::_VICTIM_BEG</definition>
        <argsstring></argsstring>
        <name>_VICTIM_BEG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="195" column="18" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a213d72f825c44fd8b158261214480ea3" prot="private" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t tf::Executor::_VICTIM_END</definition>
        <argsstring></argsstring>
        <name>_VICTIM_END</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="196" column="18" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1ac4a4632561a52d00a02d91296b20cb5a" prot="private" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t tf::Executor::_MAX_STEALS</definition>
        <argsstring></argsstring>
        <name>_MAX_STEALS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="197" column="18" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1ab79aeb0c97c27c176a3f1db1ad91bbaa" prot="private" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t tf::Executor::_MAX_YIELDS</definition>
        <argsstring></argsstring>
        <name>_MAX_YIELDS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="198" column="18" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a94357ea08db1859178f855b0b926b3de" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/thread/condition_variable" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::condition_variable</ref></type>
        <definition>std::condition_variable tf::Executor::_topology_cv</definition>
        <argsstring></argsstring>
        <name>_topology_cv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="200" column="29" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a8be5571fa0df99784aacb26b01d0f4b4" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/thread/mutex" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::mutex</ref></type>
        <definition>std::mutex tf::Executor::_topology_mutex</definition>
        <argsstring></argsstring>
        <name>_topology_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="201" column="16" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1ad031630f03103157f807d85a174d08cb" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/thread/mutex" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::mutex</ref></type>
        <definition>std::mutex tf::Executor::_wsq_mutex</definition>
        <argsstring></argsstring>
        <name>_wsq_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="202" column="16" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a9e38edfbc967dd3f5ca6f7a115f95ed7" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t tf::Executor::_num_topologies</definition>
        <argsstring></argsstring>
        <name>_num_topologies</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="204" column="12" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1ad93162f032d463cc845fbca4fc0d960e" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; Worker &gt;</type>
        <definition>std::vector&lt;Worker&gt; tf::Executor::_workers</definition>
        <argsstring></argsstring>
        <name>_workers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="206" column="17" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a3b5e7cf6749feded228a46e9fbfdef5f" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/thread/thread" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::thread</ref> &gt;</type>
        <definition>std::vector&lt;std::thread&gt; tf::Executor::_threads</definition>
        <argsstring></argsstring>
        <name>_threads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="207" column="17" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1ab92c39c4b59577cf4163c21ef2edb2f3" prot="private" static="no" mutable="no">
        <type>Notifier</type>
        <definition>Notifier tf::Executor::_notifier</definition>
        <argsstring></argsstring>
        <name>_notifier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="209" column="14" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a21685ee0442fbbd635e7134d6a0afe1c" prot="private" static="no" mutable="no">
        <type>TaskQueue&lt; Node * &gt;</type>
        <definition>TaskQueue&lt;Node*&gt; tf::Executor::_wsq</definition>
        <argsstring></argsstring>
        <name>_wsq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="211" column="15" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1aa987e2bddb791a78ece4e5693f018afb" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/atomic/atomic" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::atomic</ref>&lt; size_t &gt;</type>
        <definition>std::atomic&lt;size_t&gt; tf::Executor::_num_actives</definition>
        <argsstring></argsstring>
        <name>_num_actives</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="213" column="17" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a904e5d4f22bf5a72bc0af2a4c5f32a3e" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/atomic/atomic" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::atomic</ref>&lt; size_t &gt;</type>
        <definition>std::atomic&lt;size_t&gt; tf::Executor::_num_thieves</definition>
        <argsstring></argsstring>
        <name>_num_thieves</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="214" column="17" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a500d540a170f1da6e5247168bc6efa87" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/atomic/atomic" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::atomic</ref>&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; tf::Executor::_done</definition>
        <argsstring></argsstring>
        <name>_done</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="215" column="19" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1ad7f083460df992b1186f83ac99481a57" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/unordered_set" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::unordered_set</ref>&lt; <ref refid="cpp/memory/shared_ptr" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::shared_ptr</ref>&lt; <ref refid="classtf_1_1ObserverInterface" kindref="compound">ObserverInterface</ref> &gt; &gt;</type>
        <definition>std::unordered_set&lt;std::shared_ptr&lt;ObserverInterface&gt; &gt; tf::Executor::_observers</definition>
        <argsstring></argsstring>
        <name>_observers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="217" column="24" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="217" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtf_1_1Executor_1a4910e89d89146b6d563d598b795eb4a9" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::Executor::Executor</definition>
        <argsstring>(size_t N=std::thread::hardware_concurrency())</argsstring>
        <name>Executor</name>
        <param>
          <type>size_t</type>
          <declname>N</declname>
          <defval><ref refid="cpp/thread/thread/hardware_concurrency" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::thread::hardware_concurrency</ref>()</defval>
        </param>
        <briefdescription>
<para>constructs the executor with N worker threads </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="42" column="14" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="265" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a5a511b0cc23b264826373d3dabcef670" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::Executor::~Executor</definition>
        <argsstring>()</argsstring>
        <name>~Executor</name>
        <briefdescription>
<para>destructs the executor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="47" column="5" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="286" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a519777f5783981d534e9e53b99712069" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt; void &gt; tf::Executor::run</definition>
        <argsstring>(Taskflow &amp;taskflow)</argsstring>
        <name>run</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;</type>
          <declname>taskflow</declname>
        </param>
        <briefdescription>
<para>runs the taskflow once </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that will holds the result of the execution </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="56" column="16" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="969" bodyend="971"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ac01c2f31dd3ed3b4dfa1a6c933a58b2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt; void &gt; tf::Executor::run</definition>
        <argsstring>(Taskflow &amp;taskflow, C &amp;&amp;callable)</argsstring>
        <name>run</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>callable</declname>
        </param>
        <briefdescription>
<para>runs the taskflow once and invoke a callback upon completion </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callable</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object to be invoked after this run</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that will holds the result of the execution </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="67" column="16" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="975" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a6d0617eebc9421f1ba1f82ce6dd02c00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt; void &gt; tf::Executor::run_n</definition>
        <argsstring>(Taskflow &amp;taskflow, size_t N)</argsstring>
        <name>run_n</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>runs the taskflow for N times </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>number of runs</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that will holds the result of the execution </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="77" column="16" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="980" bodyend="982"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1abd99b189457d1a00a33cd22339694fcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt; void &gt; tf::Executor::run_n</definition>
        <argsstring>(Taskflow &amp;taskflow, size_t N, C &amp;&amp;callable)</argsstring>
        <name>run_n</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>callable</declname>
        </param>
        <briefdescription>
<para>runs the taskflow for N times and then invokes a callback </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>number of runs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callable</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object to be invoked after this run</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that will holds the result of the execution </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="89" column="16" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="986" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a0f52e9dd64b65aba32ca0e13c1ed300a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt; void &gt; tf::Executor::run_until</definition>
        <argsstring>(Taskflow &amp;taskflow, P &amp;&amp;pred)</argsstring>
        <name>run_until</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>P &amp;&amp;</type>
          <declname>pred</declname>
        </param>
        <briefdescription>
<para>runs the taskflow multiple times until the predicate becomes true and then invokes a callback </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pred</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean predicate to return true for stop</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that will holds the result of the execution </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="101" column="16" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="994" bodyend="996"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1af84856e5c4c605fcb3cbfbcad069a6a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt; void &gt; tf::Executor::run_until</definition>
        <argsstring>(Taskflow &amp;taskflow, P &amp;&amp;pred, C &amp;&amp;callable)</argsstring>
        <name>run_until</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>P &amp;&amp;</type>
          <declname>pred</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>callable</declname>
        </param>
        <briefdescription>
<para>runs the taskflow multiple times until the predicate becomes true and then invokes the callback </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pred</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean predicate to return true for stop </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callable</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object to be invoked after this run</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that will holds the result of the execution </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="114" column="16" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1093" bodyend="1133"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ab9aa252f70e9a40020a1e5a89d485b85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::wait_for_all</definition>
        <argsstring>()</argsstring>
        <name>wait_for_all</name>
        <briefdescription>
<para>wait for all pending graphs to complete </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="119" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1156" bodyend="1159"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a79223c7f32c9d715e725b8d775de2d29" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::Executor::num_workers</definition>
        <argsstring>() const</argsstring>
        <name>num_workers</name>
        <briefdescription>
<para>queries the number of worker threads (can be zero) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="124" column="12" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="305" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a6d6c28ed58211e4c27a99571e5bf0b6c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::Executor::num_topologies</definition>
        <argsstring>() const</argsstring>
        <name>num_topologies</name>
        <briefdescription>
<para>queries the number of running topologies at the time of this call </para>
        </briefdescription>
        <detaileddescription>
<para>When a taskflow is submitted to an executor, a topology is created to store runtime metadata of the running taskflow. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="132" column="12" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="310" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a6487d589cb1f6b078b69fd3bb1082345" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tf::Executor::this_worker_id</definition>
        <argsstring>() const</argsstring>
        <name>this_worker_id</name>
        <briefdescription>
<para>queries the id of the caller thread in this executor </para>
        </briefdescription>
        <detaileddescription>
<para>Each worker has an unique id from 0 to N-1 exclusive to the associated executor. If the caller thread does not belong to the executor, -1 is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="140" column="9" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="368" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a1e6866c8f1b6a2e932f06d0b4eb032c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ArgsT</declname>
            <defname>ArgsT</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto tf::Executor::async</definition>
        <argsstring>(F &amp;&amp;f, ArgsT &amp;&amp;... args)</argsstring>
        <name>async</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>ArgsT &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>runs a given function asynchronously </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ArgsT</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter types</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>callable object to call </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>parameters to pass to the callable</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that will holds the result of the execution</para>
</simplesect>
This method is thread-safe. Multiple threads can launch asynchronous tasks at the same time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="157" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="316" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1abf71e7ec0026ddfce79c912264369bc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ArgsT</declname>
            <defname>ArgsT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::silent_async</definition>
        <argsstring>(F &amp;&amp;f, ArgsT &amp;&amp;... args)</argsstring>
        <name>silent_async</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>ArgsT &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>similar to <ref refid="classtf_1_1Executor_1a1e6866c8f1b6a2e932f06d0b4eb032c0" kindref="member">tf::Executor::async</ref> but does not return a future object </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="163" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="353" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1aff77def96ae740d648dd84e571237c83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Observer</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ArgsT</declname>
            <defname>ArgsT</defname>
          </param>
        </templateparamlist>
        <type><ref refid="cpp/memory/shared_ptr" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::shared_ptr</ref>&lt; Observer &gt;</type>
        <definition>std::shared_ptr&lt; Observer &gt; tf::Executor::make_observer</definition>
        <argsstring>(ArgsT &amp;&amp;... args)</argsstring>
        <name>make_observer</name>
        <param>
          <type>ArgsT &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>constructs an observer to inspect the activities of worker threads </para>
        </briefdescription>
        <detaileddescription>
<para>Each executor manage a list of observers in shared ownership with callers.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Observer</parametername>
</parameternamelist>
<parameterdescription>
<para>observer type derived from <ref refid="classtf_1_1ObserverInterface" kindref="compound">tf::ObserverInterface</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ArgsT</parametername>
</parameternamelist>
<parameterdescription>
<para>argument parameter pack</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to forward to the constructor of the observer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a shared pointer to the created observer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="178" column="21" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="541" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a31081f492c376f7b798de0e430534531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Observer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::remove_observer</definition>
        <argsstring>(std::shared_ptr&lt; Observer &gt; observer)</argsstring>
        <name>remove_observer</name>
        <param>
          <type><ref refid="cpp/memory/shared_ptr" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::shared_ptr</ref>&lt; Observer &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>removes the associated observer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="184" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="560" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ab92083be20ea77b9fb3eb8ea2d26af68" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::Executor::num_observers</definition>
        <argsstring>() const</argsstring>
        <name>num_observers</name>
        <briefdescription>
<para>queries the number of observers </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="189" column="12" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="571" bodyend="573"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtf_1_1Executor_1a57f5105dc812d83f259ec8cab7c96228" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::Executor::_wait_for_task</definition>
        <argsstring>(Worker &amp;, Node *&amp;)</argsstring>
        <name>_wait_for_task</name>
        <param>
          <type>Worker &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *&amp;</type>
          <defname>t</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="219" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="471" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ae023614977a19def9e04cf7212eab65b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_observer_prologue</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_observer_prologue</name>
        <param>
          <type>Worker &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="221" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="802" bodyend="806"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a9cd8c1a72af4477bc0f9575b68ffb16a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_observer_epilogue</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_observer_epilogue</name>
        <param>
          <type>Worker &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="222" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="809" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a8aee6c0ec55b4bfb3909601203e98514" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_spawn</definition>
        <argsstring>(size_t)</argsstring>
        <name>_spawn</name>
        <param>
          <type>size_t</type>
          <defname>N</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="223" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="374" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a8615d8b666bc94e2007f2a1561767895" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_worker_loop</definition>
        <argsstring>(Worker &amp;)</argsstring>
        <name>_worker_loop</name>
        <param>
          <type>Worker &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="224" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a0b4f231e11016194980b14e76262c8a7" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_exploit_task</definition>
        <argsstring>(Worker &amp;, Node *&amp;)</argsstring>
        <name>_exploit_task</name>
        <param>
          <type>Worker &amp;</type>
          <defname>w</defname>
        </param>
        <param>
          <type>Node *&amp;</type>
          <defname>t</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="225" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="453" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1aab7cc2e53d75fcc87fcc919f29bf9ca9" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_explore_task</definition>
        <argsstring>(Worker &amp;, Node *&amp;)</argsstring>
        <name>_explore_task</name>
        <param>
          <type>Worker &amp;</type>
          <defname>w</defname>
        </param>
        <param>
          <type>Node *&amp;</type>
          <defname>t</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="226" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="405" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a685c08b62a494359e34c6de2a700fdab" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_schedule</definition>
        <argsstring>(Node *)</argsstring>
        <name>_schedule</name>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="227" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="578" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a8b28e234949b06adad56b2c4c4c01d1e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_schedule</definition>
        <argsstring>(const std::vector&lt; Node * &gt; &amp;)</argsstring>
        <name>_schedule</name>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; Node * &gt; &amp;</type>
          <defname>nodes</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="228" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="602" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ad16165142908aca9444ea88e65040219" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke</name>
        <param>
          <type>Worker &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="229" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="636" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ac243d2a08b5a4a75dd440dc063b886ce" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_static_task</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke_static_task</name>
        <param>
          <type>Worker &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="230" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="816" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a4a000baf70b108201e3787787309c272" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_dynamic_task</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke_dynamic_task</name>
        <param>
          <type>Worker &amp;</type>
          <defname>w</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="231" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="823" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a1714817bb86c97a78e7efa149cc5058e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_dynamic_task_internal</definition>
        <argsstring>(Worker &amp;, Node *, Graph &amp;, bool)</argsstring>
        <name>_invoke_dynamic_task_internal</name>
        <param>
          <type>Worker &amp;</type>
          <defname>w</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>p</defname>
        </param>
        <param>
          <type>Graph &amp;</type>
          <defname>g</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>detach</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="232" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="853" bodyend="927"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a073460c4398c8be36cefc890370239c1" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_dynamic_task_external</definition>
        <argsstring>(Node *, Graph &amp;, bool)</argsstring>
        <name>_invoke_dynamic_task_external</name>
        <param>
          <type>Node *</type>
          <defname>p</defname>
        </param>
        <param>
          <type>Graph &amp;</type>
          <defname>g</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>detach</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="233" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="843" bodyend="850"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ad2b0401c6102db1f3f638132a6529427" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_condition_task</definition>
        <argsstring>(Worker &amp;, Node *, int &amp;)</argsstring>
        <name>_invoke_condition_task</name>
        <param>
          <type>Worker &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <param>
          <type>int &amp;</type>
          <defname>cond</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="234" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="930" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a4c5324657bf02bc2da0294192ab80233" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_module_task</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke_module_task</name>
        <param>
          <type>Worker &amp;</type>
          <defname>w</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="235" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="947" bodyend="952"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a505ccafa7ab1855c200d5590499adf5a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_async_task</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke_async_task</name>
        <param>
          <type>Worker &amp;</type>
          <defname>w</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="236" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="955" bodyend="959"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ae2bb8ef1456ec6414e46d7ed77628bd9" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_silent_async_task</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke_silent_async_task</name>
        <param>
          <type>Worker &amp;</type>
          <defname>w</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="237" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="962" bodyend="966"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a086b6cfc6a5c57dedcdb35e72c5c2386" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_set_up_topology</definition>
        <argsstring>(Topology *)</argsstring>
        <name>_set_up_topology</name>
        <param>
          <type>Topology *</type>
          <defname>tpg</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="238" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="999" bodyend="1024"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1aac98be37af843c4ce0c2e56a0c8560e5" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_tear_down_topology</definition>
        <argsstring>(Topology *)</argsstring>
        <name>_tear_down_topology</name>
        <param>
          <type>Topology *</type>
          <defname>tpg</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="239" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1027" bodyend="1089"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a42e7db3fc43e1c5479e30e8d83da9e74" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_tear_down_async</definition>
        <argsstring>(Node *)</argsstring>
        <name>_tear_down_async</name>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="240" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="759" bodyend="767"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ad6003f99446940bc44d08802ed0f58ac" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_tear_down_invoke</definition>
        <argsstring>(Node *, bool)</argsstring>
        <name>_tear_down_invoke</name>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>cancel</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="241" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="770" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ab85dc42b3e9b18e4b975bd5e9a8c5e72" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_increment_topology</definition>
        <argsstring>()</argsstring>
        <name>_increment_topology</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="242" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1136" bodyend="1139"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a8728f22f6d177fad84ce667e02a7a3b9" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_decrement_topology</definition>
        <argsstring>()</argsstring>
        <name>_decrement_topology</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="243" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1150" bodyend="1153"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a08945917285cd57d33efc99530fbd384" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_decrement_topology_and_notify</definition>
        <argsstring>()</argsstring>
        <name>_decrement_topology_and_notify</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="244" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1142" bodyend="1147"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ae4be3b787a3c6eaaf18589a25e9c844f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_cudaflow_task</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke_cudaflow_task</name>
        <param>
          <type>Worker &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="245" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="939" bodyend="943"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a50c30b581f48331f2aa35af5cc9e135d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_invocable_r_v&lt; void, C, <ref refid="classtf_1_1cudaFlow" kindref="compound">cudaFlow</ref> &amp; &gt;, void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::_invoke_cudaflow_task_entry</definition>
        <argsstring>(C &amp;&amp;, Node *)</argsstring>
        <name>_invoke_cudaflow_task_entry</name>
        <param>
          <type>C &amp;&amp;</type>
          <defname>c</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="250" column="10" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_flow.hpp" bodystart="1177" bodyend="1193"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a50c30b581f48331f2aa35af5cc9e135d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_invocable_r_v&lt; void, C, <ref refid="classtf_1_1cudaFlowCapturer" kindref="compound">cudaFlowCapturer</ref> &amp; &gt;, void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::_invoke_cudaflow_task_entry</definition>
        <argsstring>(C &amp;&amp;, Node *)</argsstring>
        <name>_invoke_cudaflow_task_entry</name>
        <param>
          <type>C &amp;&amp;</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="255" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>execution interface for running a taskflow graph </para>
    </briefdescription>
    <detaileddescription>
<para>An executor object manages a set of worker threads to run taskflow(s) using an efficient work-stealing scheduling algorithm. </para>
    </detaileddescription>
    <location file="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="26" column="1" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="26" bodyend="262"/>
    <listofallmembers>
      <member refid="classtf_1_1Executor_1a8728f22f6d177fad84ce667e02a7a3b9" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_decrement_topology</name></member>
      <member refid="classtf_1_1Executor_1a08945917285cd57d33efc99530fbd384" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_decrement_topology_and_notify</name></member>
      <member refid="classtf_1_1Executor_1a500d540a170f1da6e5247168bc6efa87" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_done</name></member>
      <member refid="classtf_1_1Executor_1a0b4f231e11016194980b14e76262c8a7" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_exploit_task</name></member>
      <member refid="classtf_1_1Executor_1aab7cc2e53d75fcc87fcc919f29bf9ca9" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_explore_task</name></member>
      <member refid="classtf_1_1Executor_1ab85dc42b3e9b18e4b975bd5e9a8c5e72" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_increment_topology</name></member>
      <member refid="classtf_1_1Executor_1ad16165142908aca9444ea88e65040219" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke</name></member>
      <member refid="classtf_1_1Executor_1a505ccafa7ab1855c200d5590499adf5a" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_async_task</name></member>
      <member refid="classtf_1_1Executor_1ad2b0401c6102db1f3f638132a6529427" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_condition_task</name></member>
      <member refid="classtf_1_1Executor_1ae4be3b787a3c6eaaf18589a25e9c844f" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_cudaflow_task</name></member>
      <member refid="classtf_1_1Executor_1a50c30b581f48331f2aa35af5cc9e135d" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_cudaflow_task_entry</name></member>
      <member refid="classtf_1_1Executor_1a50c30b581f48331f2aa35af5cc9e135d" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_cudaflow_task_entry</name></member>
      <member refid="classtf_1_1Executor_1a4a000baf70b108201e3787787309c272" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_dynamic_task</name></member>
      <member refid="classtf_1_1Executor_1a073460c4398c8be36cefc890370239c1" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_dynamic_task_external</name></member>
      <member refid="classtf_1_1Executor_1a1714817bb86c97a78e7efa149cc5058e" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_dynamic_task_internal</name></member>
      <member refid="classtf_1_1Executor_1a4c5324657bf02bc2da0294192ab80233" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_module_task</name></member>
      <member refid="classtf_1_1Executor_1ae2bb8ef1456ec6414e46d7ed77628bd9" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_silent_async_task</name></member>
      <member refid="classtf_1_1Executor_1ac243d2a08b5a4a75dd440dc063b886ce" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_static_task</name></member>
      <member refid="classtf_1_1Executor_1ac4a4632561a52d00a02d91296b20cb5a" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_MAX_STEALS</name></member>
      <member refid="classtf_1_1Executor_1ab79aeb0c97c27c176a3f1db1ad91bbaa" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_MAX_YIELDS</name></member>
      <member refid="classtf_1_1Executor_1ab92c39c4b59577cf4163c21ef2edb2f3" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_notifier</name></member>
      <member refid="classtf_1_1Executor_1aa987e2bddb791a78ece4e5693f018afb" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_num_actives</name></member>
      <member refid="classtf_1_1Executor_1a904e5d4f22bf5a72bc0af2a4c5f32a3e" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_num_thieves</name></member>
      <member refid="classtf_1_1Executor_1a9e38edfbc967dd3f5ca6f7a115f95ed7" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_num_topologies</name></member>
      <member refid="classtf_1_1Executor_1a9cd8c1a72af4477bc0f9575b68ffb16a" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_observer_epilogue</name></member>
      <member refid="classtf_1_1Executor_1ae023614977a19def9e04cf7212eab65b" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_observer_prologue</name></member>
      <member refid="classtf_1_1Executor_1ad7f083460df992b1186f83ac99481a57" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_observers</name></member>
      <member refid="classtf_1_1Executor_1a6a07829c7fbbe077cbb78d7506e85db9" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_per_thread</name></member>
      <member refid="classtf_1_1Executor_1a685c08b62a494359e34c6de2a700fdab" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_schedule</name></member>
      <member refid="classtf_1_1Executor_1a8b28e234949b06adad56b2c4c4c01d1e" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_schedule</name></member>
      <member refid="classtf_1_1Executor_1a086b6cfc6a5c57dedcdb35e72c5c2386" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_set_up_topology</name></member>
      <member refid="classtf_1_1Executor_1a8aee6c0ec55b4bfb3909601203e98514" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_spawn</name></member>
      <member refid="classtf_1_1Executor_1a42e7db3fc43e1c5479e30e8d83da9e74" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_tear_down_async</name></member>
      <member refid="classtf_1_1Executor_1ad6003f99446940bc44d08802ed0f58ac" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_tear_down_invoke</name></member>
      <member refid="classtf_1_1Executor_1aac98be37af843c4ce0c2e56a0c8560e5" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_tear_down_topology</name></member>
      <member refid="classtf_1_1Executor_1a3b5e7cf6749feded228a46e9fbfdef5f" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_threads</name></member>
      <member refid="classtf_1_1Executor_1a94357ea08db1859178f855b0b926b3de" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_topology_cv</name></member>
      <member refid="classtf_1_1Executor_1a8be5571fa0df99784aacb26b01d0f4b4" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_topology_mutex</name></member>
      <member refid="classtf_1_1Executor_1ab052ce8c698583f15216a89ba4c68da4" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_VICTIM_BEG</name></member>
      <member refid="classtf_1_1Executor_1a213d72f825c44fd8b158261214480ea3" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_VICTIM_END</name></member>
      <member refid="classtf_1_1Executor_1a57f5105dc812d83f259ec8cab7c96228" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_wait_for_task</name></member>
      <member refid="classtf_1_1Executor_1a8615d8b666bc94e2007f2a1561767895" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_worker_loop</name></member>
      <member refid="classtf_1_1Executor_1ad93162f032d463cc845fbca4fc0d960e" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_workers</name></member>
      <member refid="classtf_1_1Executor_1a21685ee0442fbbd635e7134d6a0afe1c" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_wsq</name></member>
      <member refid="classtf_1_1Executor_1ad031630f03103157f807d85a174d08cb" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_wsq_mutex</name></member>
      <member refid="classtf_1_1Executor_1a1e6866c8f1b6a2e932f06d0b4eb032c0" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>async</name></member>
      <member refid="classtf_1_1Executor_1a9f64f729511a922781a59663ff1c6250" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>cudaFlow</name></member>
      <member refid="classtf_1_1Executor_1a4910e89d89146b6d563d598b795eb4a9" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>Executor</name></member>
      <member refid="classtf_1_1Executor_1a61184f9bd9c801d0a5eccecfdbddc641" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>FlowBuilder</name></member>
      <member refid="classtf_1_1Executor_1aff77def96ae740d648dd84e571237c83" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>make_observer</name></member>
      <member refid="classtf_1_1Executor_1ab92083be20ea77b9fb3eb8ea2d26af68" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>num_observers</name></member>
      <member refid="classtf_1_1Executor_1a6d6c28ed58211e4c27a99571e5bf0b6c" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>num_topologies</name></member>
      <member refid="classtf_1_1Executor_1a79223c7f32c9d715e725b8d775de2d29" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>num_workers</name></member>
      <member refid="classtf_1_1Executor_1a31081f492c376f7b798de0e430534531" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>remove_observer</name></member>
      <member refid="classtf_1_1Executor_1a519777f5783981d534e9e53b99712069" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run</name></member>
      <member refid="classtf_1_1Executor_1ac01c2f31dd3ed3b4dfa1a6c933a58b2f" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run</name></member>
      <member refid="classtf_1_1Executor_1a6d0617eebc9421f1ba1f82ce6dd02c00" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run_n</name></member>
      <member refid="classtf_1_1Executor_1abd99b189457d1a00a33cd22339694fcd" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run_n</name></member>
      <member refid="classtf_1_1Executor_1a0f52e9dd64b65aba32ca0e13c1ed300a" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run_until</name></member>
      <member refid="classtf_1_1Executor_1af84856e5c4c605fcb3cbfbcad069a6a8" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run_until</name></member>
      <member refid="classtf_1_1Executor_1abf71e7ec0026ddfce79c912264369bc9" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>silent_async</name></member>
      <member refid="classtf_1_1Executor_1aa48945297ede77a161defc88033ce8a6" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>Subflow</name></member>
      <member refid="classtf_1_1Executor_1a6487d589cb1f6b078b69fd3bb1082345" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>this_worker_id</name></member>
      <member refid="classtf_1_1Executor_1ab9aa252f70e9a40020a1e5a89d485b85" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>wait_for_all</name></member>
      <member refid="classtf_1_1Executor_1a5a511b0cc23b264826373d3dabcef670" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>~Executor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
