<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="namespacetf" kind="namespace" language="C++">
    <compoundname>tf</compoundname>
    <innerclass refid="classtf_1_1ChromeObserver" prot="public">tf::ChromeObserver</innerclass>
    <innerclass refid="classtf_1_1CriticalSection" prot="public">tf::CriticalSection</innerclass>
    <innerclass refid="classtf_1_1cublasFlowCapturer" prot="public">tf::cublasFlowCapturer</innerclass>
    <innerclass refid="classtf_1_1cudaCapturingBase" prot="private">tf::cudaCapturingBase</innerclass>
    <innerclass refid="structtf_1_1cudaEventCreator" prot="private">tf::cudaEventCreator</innerclass>
    <innerclass refid="structtf_1_1cudaEventDeleter" prot="private">tf::cudaEventDeleter</innerclass>
    <innerclass refid="classtf_1_1cudaFlow" prot="public">tf::cudaFlow</innerclass>
    <innerclass refid="classtf_1_1cudaFlowCapturer" prot="public">tf::cudaFlowCapturer</innerclass>
    <innerclass refid="classtf_1_1cudaFlowCapturerBase" prot="public">tf::cudaFlowCapturerBase</innerclass>
    <innerclass refid="classtf_1_1cudaRoundRobinCapturing" prot="public">tf::cudaRoundRobinCapturing</innerclass>
    <innerclass refid="classtf_1_1cudaScopedDevice" prot="public">tf::cudaScopedDevice</innerclass>
    <innerclass refid="classtf_1_1cudaScopedPerThreadEvent" prot="public">tf::cudaScopedPerThreadEvent</innerclass>
    <innerclass refid="classtf_1_1cudaScopedPerThreadStream" prot="public">tf::cudaScopedPerThreadStream</innerclass>
    <innerclass refid="classtf_1_1cudaSequentialCapturing" prot="public">tf::cudaSequentialCapturing</innerclass>
    <innerclass refid="structtf_1_1cudaSharedMemory" prot="private">tf::cudaSharedMemory</innerclass>
    <innerclass refid="structtf_1_1cudaSharedMemory_3_01bool_01_4" prot="private">tf::cudaSharedMemory&lt; bool &gt;</innerclass>
    <innerclass refid="structtf_1_1cudaSharedMemory_3_01char_01_4" prot="private">tf::cudaSharedMemory&lt; char &gt;</innerclass>
    <innerclass refid="structtf_1_1cudaSharedMemory_3_01double_01_4" prot="private">tf::cudaSharedMemory&lt; double &gt;</innerclass>
    <innerclass refid="structtf_1_1cudaSharedMemory_3_01float_01_4" prot="private">tf::cudaSharedMemory&lt; float &gt;</innerclass>
    <innerclass refid="structtf_1_1cudaSharedMemory_3_01int_01_4" prot="private">tf::cudaSharedMemory&lt; int &gt;</innerclass>
    <innerclass refid="structtf_1_1cudaSharedMemory_3_01long_01_4" prot="private">tf::cudaSharedMemory&lt; long &gt;</innerclass>
    <innerclass refid="structtf_1_1cudaSharedMemory_3_01short_01_4" prot="private">tf::cudaSharedMemory&lt; short &gt;</innerclass>
    <innerclass refid="structtf_1_1cudaSharedMemory_3_01unsigned_01char_01_4" prot="private">tf::cudaSharedMemory&lt; unsigned char &gt;</innerclass>
    <innerclass refid="structtf_1_1cudaSharedMemory_3_01unsigned_01int_01_4" prot="private">tf::cudaSharedMemory&lt; unsigned int &gt;</innerclass>
    <innerclass refid="structtf_1_1cudaSharedMemory_3_01unsigned_01long_01_4" prot="private">tf::cudaSharedMemory&lt; unsigned long &gt;</innerclass>
    <innerclass refid="structtf_1_1cudaSharedMemory_3_01unsigned_01short_01_4" prot="private">tf::cudaSharedMemory&lt; unsigned short &gt;</innerclass>
    <innerclass refid="structtf_1_1cudaStreamCreator" prot="private">tf::cudaStreamCreator</innerclass>
    <innerclass refid="structtf_1_1cudaStreamDeleter" prot="private">tf::cudaStreamDeleter</innerclass>
    <innerclass refid="classtf_1_1cudaTask" prot="public">tf::cudaTask</innerclass>
    <innerclass refid="classtf_1_1Executor" prot="public">tf::Executor</innerclass>
    <innerclass refid="classtf_1_1FlowBuilder" prot="public">tf::FlowBuilder</innerclass>
    <innerclass refid="classtf_1_1Future" prot="public">tf::Future</innerclass>
    <innerclass refid="classtf_1_1ObserverInterface" prot="public">tf::ObserverInterface</innerclass>
    <innerclass refid="structtf_1_1ProfileData" prot="private">tf::ProfileData</innerclass>
    <innerclass refid="structtf_1_1Segment" prot="private">tf::Segment</innerclass>
    <innerclass refid="classtf_1_1Semaphore" prot="public">tf::Semaphore</innerclass>
    <innerclass refid="classtf_1_1Subflow" prot="public">tf::Subflow</innerclass>
    <innerclass refid="classtf_1_1Task" prot="public">tf::Task</innerclass>
    <innerclass refid="classtf_1_1Taskflow" prot="public">tf::Taskflow</innerclass>
    <innerclass refid="classtf_1_1TaskView" prot="public">tf::TaskView</innerclass>
    <innerclass refid="classtf_1_1TFProfManager" prot="private">tf::TFProfManager</innerclass>
    <innerclass refid="classtf_1_1TFProfObserver" prot="public">tf::TFProfObserver</innerclass>
    <innerclass refid="structtf_1_1Timeline" prot="private">tf::Timeline</innerclass>
    <innerclass refid="structtf_1_1Worker" prot="private">tf::Worker</innerclass>
    <innerclass refid="classtf_1_1WorkerView" prot="public">tf::WorkerView</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacetf_1a1355048578785a80414707ff308b395a" prot="public" static="no" strong="yes">
        <type>int</type>
        <name>TaskType</name>
        <enumvalue id="namespacetf_1a1355048578785a80414707ff308b395aae54e6f6ba0c7cbb4eb7a2016e2f17842" prot="public">
          <name>PLACEHOLDER</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetf_1a1355048578785a80414707ff308b395aa1fbe66e2b3b8907e5b1e605191a1c225" prot="public">
          <name>CUDAFLOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetf_1a1355048578785a80414707ff308b395aafe6f99ef1ec99efbdc19a9786cf1facc" prot="public">
          <name>STATIC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetf_1a1355048578785a80414707ff308b395aa0fcc90da4811c877ba9f9c12f7d60bc9" prot="public">
          <name>DYNAMIC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetf_1a1355048578785a80414707ff308b395aa9f768c0bb1c3e84ca086a85211e978ac" prot="public">
          <name>CONDITION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetf_1a1355048578785a80414707ff308b395aa1cf5e1f5569acda3c4a88a91c5130a69" prot="public">
          <name>MODULE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetf_1a1355048578785a80414707ff308b395aabe553330beb7b3d994656e0a4e66cd96" prot="public">
          <name>ASYNC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetf_1a1355048578785a80414707ff308b395aa0db45d2a4141101bdfe48e3314cfbca3" prot="public">
          <name>UNDEFINED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>enumeration of all task types </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/task.hpp" line="21" column="1" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/task.hpp" bodystart="21" bodyend="30"/>
      </memberdef>
      <memberdef kind="enum" id="namespacetf_1a192f7cb0fab2eb6f1c84f6046706435d" prot="public" static="no" strong="yes">
        <type>int</type>
        <name>ObserverType</name>
        <enumvalue id="namespacetf_1a192f7cb0fab2eb6f1c84f6046706435dac19bf39d8838d00eddb556775fa8acce" prot="public">
          <name>TFPROF</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetf_1a192f7cb0fab2eb6f1c84f6046706435da37960509766262569d504f02a0ee986d" prot="public">
          <name>CHROME</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetf_1a192f7cb0fab2eb6f1c84f6046706435da0db45d2a4141101bdfe48e3314cfbca3" prot="public">
          <name>UNDEFINED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>enumeration of all observer types </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/observer.hpp" line="715" column="1" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/observer.hpp" bodystart="715" bodyend="719"/>
      </memberdef>
      <memberdef kind="enum" id="namespacetf_1afebc56ae6d5765010d0dd13a5f04132e" prot="public" static="no" strong="yes">
        <type>int</type>
        <name>cudaTaskType</name>
        <enumvalue id="namespacetf_1afebc56ae6d5765010d0dd13a5f04132eaba2b45bdc11e2a4a6e86aab2ac693cbb" prot="public">
          <name>EMPTY</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetf_1afebc56ae6d5765010d0dd13a5f04132eab9361011891280a44d85b967739cc6a5" prot="public">
          <name>HOST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetf_1afebc56ae6d5765010d0dd13a5f04132ea41d4dbfd78ceea21abb0ecb03c3cc921" prot="public">
          <name>MEMSET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetf_1afebc56ae6d5765010d0dd13a5f04132eac5d10cc70cce96265c445f14e7f5aba4" prot="public">
          <name>MEMCPY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetf_1afebc56ae6d5765010d0dd13a5f04132ea35c10219c45ccfb5b07444fd7e17214c" prot="public">
          <name>KERNEL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetf_1afebc56ae6d5765010d0dd13a5f04132ea46be697979903d784a70aeec45eb14ad" prot="public">
          <name>SUBFLOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetf_1afebc56ae6d5765010d0dd13a5f04132eab72f08e0732365cac9599b5c42157bf9" prot="public">
          <name>CAPTURE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetf_1afebc56ae6d5765010d0dd13a5f04132ea0db45d2a4141101bdfe48e3314cfbca3" prot="public">
          <name>UNDEFINED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>enumeration of all cudaTask types </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_task.hpp" line="21" column="1" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_task.hpp" bodystart="21" bodyend="30"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacetf_1a8cff4bbd797dde4dfab096c3cc657833" prot="public" static="no">
        <type><ref refid="cpp/chrono/time_point" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::chrono::time_point</ref>&lt; <ref refid="cpp/chrono/steady_clock" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::chrono::steady_clock</ref> &gt;</type>
        <definition>using tf::observer_stamp_t = typedef std::chrono::time_point&lt;std::chrono::steady_clock&gt;</definition>
        <argsstring></argsstring>
        <name>observer_stamp_t</name>
        <briefdescription>
<para>default time point type of observers </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/observer.hpp" line="20" column="1" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/observer.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetf_1a632bb71dc4ddedbf2c26f6f25a2d6a49" prot="public" static="no">
        <type>cudaPerThreadDeviceObjectPool&lt; cudaStream_t, cudaStreamCreator, cudaStreamDeleter &gt;</type>
        <definition>using tf::cudaPerThreadStreamPool = typedef cudaPerThreadDeviceObjectPool&lt; cudaStream_t, cudaStreamCreator, cudaStreamDeleter &gt;</definition>
        <argsstring></argsstring>
        <name>cudaPerThreadStreamPool</name>
        <briefdescription>
<para>alias of per-thread stream pool type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="43" column="1" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetf_1a7356453a9963094ac069f6597bee50cd" prot="public" static="no">
        <type>cudaPerThreadDeviceObjectPool&lt; cudaEvent_t, cudaEventCreator, cudaEventDeleter &gt;</type>
        <definition>using tf::cudaPerThreadEventPool = typedef cudaPerThreadDeviceObjectPool&lt; cudaEvent_t, cudaEventCreator, cudaEventDeleter &gt;</definition>
        <argsstring></argsstring>
        <name>cudaPerThreadEventPool</name>
        <briefdescription>
<para>alias of per-thread event pool type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="178" column="1" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="180" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacetf_1a3d823d8776745f3348dc87bba2fcc91b" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="cpp/container/array" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::array</ref>&lt; <ref refid="namespacetf_1a1355048578785a80414707ff308b395a" kindref="member">TaskType</ref>, 7 &gt;</type>
        <definition>constexpr std::array&lt;TaskType, 7&gt; tf::TASK_TYPES</definition>
        <argsstring></argsstring>
        <name>TASK_TYPES</name>
        <initializer>= {
  TaskType::PLACEHOLDER,
  TaskType::CUDAFLOW,
  TaskType::STATIC,
  TaskType::DYNAMIC,
  TaskType::CONDITION,
  TaskType::MODULE,
  TaskType::ASYNC
}</initializer>
        <briefdescription>
<para>array of all task types (used for iterating task types) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/task.hpp" line="35" column="29" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/task.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetf_1a11fc9c98eb3a0d3a9aa55598b1f4d614" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool tf::is_static_task_v</definition>
        <argsstring></argsstring>
        <name>is_static_task_v</name>
        <initializer>= std::is_invocable_r_v&lt;void, C&gt; &amp;&amp;
                                 !std::is_invocable_r_v&lt;int, C&gt;</initializer>
        <briefdescription>
<para>determines if a callable is a static task </para>
        </briefdescription>
        <detaileddescription>
<para>A static task is a callable object constructible from std::function&lt;void()&gt;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/task.hpp" line="76" column="16" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/task.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetf_1a1eea7593f25ab348cfb656dbdf4e5b05" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool tf::is_dynamic_task_v</definition>
        <argsstring></argsstring>
        <name>is_dynamic_task_v</name>
        <initializer>= std::is_invocable_r_v&lt;void, C, <ref refid="classtf_1_1Subflow" kindref="compound">Subflow</ref>&amp;&gt;</initializer>
        <briefdescription>
<para>determines if a callable is a dynamic task </para>
        </briefdescription>
        <detaileddescription>
<para>A dynamic task is a callable object constructible from std::function&lt;void(Subflow&amp;)&gt;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/task.hpp" line="85" column="16" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/task.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetf_1a00ca2fc2de0e679a7d9b8039340343df" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool tf::is_condition_task_v</definition>
        <argsstring></argsstring>
        <name>is_condition_task_v</name>
        <initializer>= std::is_invocable_r_v&lt;int, C&gt;</initializer>
        <briefdescription>
<para>determines if a callable is a condition task </para>
        </briefdescription>
        <detaileddescription>
<para>A condition task is a callable object constructible from std::function&lt;int()&gt;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/task.hpp" line="93" column="16" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/task.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetf_1adb8433555d8cdc0b3c5d95e8d51a90f0" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool tf::is_cudaflow_task_v</definition>
        <argsstring></argsstring>
        <name>is_cudaflow_task_v</name>
        <initializer>= std::is_invocable_r_v&lt;void, C, <ref refid="classtf_1_1cudaFlow" kindref="compound">cudaFlow</ref>&amp;&gt; ||
                                    std::is_invocable_r_v&lt;void, C, <ref refid="classtf_1_1cudaFlowCapturer" kindref="compound">cudaFlowCapturer</ref>&amp;&gt;</initializer>
        <briefdescription>
<para>determines if a callable is a cudaflow task </para>
        </briefdescription>
        <detaileddescription>
<para>A <ref refid="classtf_1_1cudaFlow" kindref="compound">cudaFlow</ref> task is a callable object constructible from std::function&lt;void(tf::cudaFlow&amp;)&gt; or std::function&lt;void(tf::cudaFlowCapturer&amp;)&gt;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/task.hpp" line="102" column="16" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/task.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacetf_1a9ca58dc6c666698cc7373eb0262140ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* tf::to_string</definition>
        <argsstring>(TaskType type)</argsstring>
        <name>to_string</name>
        <param>
          <type><ref refid="namespacetf_1a1355048578785a80414707ff308b395a" kindref="member">TaskType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>convert a task type to a human-readable string </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/task.hpp" line="48" column="19" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/task.hpp" bodystart="48" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1ad216aea4d0f648e149e47374ad015b1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream&amp; tf::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Task &amp;task)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classtf_1_1Task" kindref="compound">Task</ref> &amp;</type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>overload of ostream inserter operator for <ref refid="classtf_1_1cudaTask" kindref="compound">cudaTask</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/task.hpp" line="493" column="8" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/task.hpp" bodystart="493" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1aa3fc0699b2c2b8f2f76bb39f91be1acb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* tf::to_string</definition>
        <argsstring>(ObserverType type)</argsstring>
        <name>to_string</name>
        <param>
          <type><ref refid="namespacetf_1a192f7cb0fab2eb6f1c84f6046706435d" kindref="member">ObserverType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>convert an observer type to a human-readable string </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/core/observer.hpp" line="724" column="19" bodyfile="/Users/twhuang/Code/taskflow/taskflow/core/observer.hpp" bodystart="724" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1abffa70155a5f160b7ceb86ee52ab2136" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::cuda_get_num_devices</definition>
        <argsstring>()</argsstring>
        <name>cuda_get_num_devices</name>
        <briefdescription>
<para>queries the number of available devices </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" line="15" column="15" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" bodystart="15" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1a235f5a9ce203d538eec1f4114221d473" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tf::cuda_get_device</definition>
        <argsstring>()</argsstring>
        <name>cuda_get_device</name>
        <briefdescription>
<para>gets the current device associated with the caller thread </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" line="24" column="12" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" bodystart="24" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1ade2938289fa49aafc9b2b7b090deaa22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::cuda_set_device</definition>
        <argsstring>(int id)</argsstring>
        <name>cuda_set_device</name>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>switches to a given device context </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" line="33" column="13" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" bodystart="33" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1a403b679694f4c85c857163b47e84d566" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::cuda_get_device_property</definition>
        <argsstring>(int i, cudaDeviceProp &amp;p)</argsstring>
        <name>cuda_get_device_property</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>cudaDeviceProp &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>obtains the device property </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" line="40" column="13" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" bodystart="40" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1a0e82b8a929e12349240276e34ec9f8c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>cudaDeviceProp</type>
        <definition>cudaDeviceProp tf::cuda_get_device_property</definition>
        <argsstring>(int i)</argsstring>
        <name>cuda_get_device_property</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>obtains the device property </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" line="49" column="23" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" bodystart="49" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1aff8073c78daa741df76b530a0e602287" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::cuda_dump_device_property</definition>
        <argsstring>(std::ostream &amp;os, const cudaDeviceProp &amp;p)</argsstring>
        <name>cuda_dump_device_property</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const cudaDeviceProp &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>dumps the device property </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" line="60" column="13" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" bodystart="60" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1abf813f7ac4249d1b752d1b724f970deb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::cuda_get_device_max_threads_per_block</definition>
        <argsstring>(int d)</argsstring>
        <name>cuda_get_device_max_threads_per_block</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>queries the maximum threads per block on a device </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" line="102" column="15" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" bodystart="102" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1af8184bb128c446fe383315f3dc15acf6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::cuda_get_device_max_x_dim_per_block</definition>
        <argsstring>(int d)</argsstring>
        <name>cuda_get_device_max_x_dim_per_block</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>queries the maximum x-dimension per block on a device </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" line="114" column="15" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" bodystart="114" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1a9aba5f29135b9da29015c2a367ab1d70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::cuda_get_device_max_y_dim_per_block</definition>
        <argsstring>(int d)</argsstring>
        <name>cuda_get_device_max_y_dim_per_block</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>queries the maximum y-dimension per block on a device </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" line="126" column="15" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" bodystart="126" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1a5580f59e633625b2f344bbf477d17c2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::cuda_get_device_max_z_dim_per_block</definition>
        <argsstring>(int d)</argsstring>
        <name>cuda_get_device_max_z_dim_per_block</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>queries the maximum z-dimension per block on a device </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" line="138" column="15" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" bodystart="138" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1a597579c8a9ab31244418e30a5aa74491" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::cuda_get_device_max_x_dim_per_grid</definition>
        <argsstring>(int d)</argsstring>
        <name>cuda_get_device_max_x_dim_per_grid</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>queries the maximum x-dimension per grid on a device </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" line="150" column="15" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" bodystart="150" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1a91d5c1609a7542949dd56d08b7c4c645" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::cuda_get_device_max_y_dim_per_grid</definition>
        <argsstring>(int d)</argsstring>
        <name>cuda_get_device_max_y_dim_per_grid</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>queries the maximum y-dimension per grid on a device </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" line="162" column="15" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" bodystart="162" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1a0373e32a20c7fc90c4f0461ee41bb918" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::cuda_get_device_max_z_dim_per_grid</definition>
        <argsstring>(int d)</argsstring>
        <name>cuda_get_device_max_z_dim_per_grid</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>queries the maximum z-dimension per grid on a device </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" line="174" column="15" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" bodystart="174" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1aeca46ac171c4941a75aafddfe7546bfa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::cuda_get_device_max_shm_per_block</definition>
        <argsstring>(int d)</argsstring>
        <name>cuda_get_device_max_shm_per_block</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>queries the maximum shared memory size in bytes per block on a device </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" line="186" column="15" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" bodystart="186" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1aea1b2af1073496f047d6fb9984cff4f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::cuda_get_device_warp_size</definition>
        <argsstring>(int d)</argsstring>
        <name>cuda_get_device_warp_size</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>queries the warp size on a device </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" line="198" column="15" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" bodystart="198" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1a1fb03793a6b8705026b80ef87599d4d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tf::cuda_get_device_compute_capability_major</definition>
        <argsstring>(int d)</argsstring>
        <name>cuda_get_device_compute_capability_major</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>queries the major number of compute capability of a device </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" line="210" column="12" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" bodystart="210" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1a71f5177665f4f7e18984ccc57d625602" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tf::cuda_get_device_compute_capability_minor</definition>
        <argsstring>(int d)</argsstring>
        <name>cuda_get_device_compute_capability_minor</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>queries the minor number of compute capability of a device </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" line="222" column="12" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" bodystart="222" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1ad389294b4d1c14219d8d098f796e27c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::cuda_get_device_unified_addressing</definition>
        <argsstring>(int d)</argsstring>
        <name>cuda_get_device_unified_addressing</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>queries if the device supports unified addressing </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" line="234" column="13" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" bodystart="234" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1a43ac57f0eca3aa83c04bec3c4da9ab82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tf::cuda_get_driver_version</definition>
        <argsstring>()</argsstring>
        <name>cuda_get_driver_version</name>
        <briefdescription>
<para>queries the latest CUDA version (1000 * major + 10 * minor) supported by the driver </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" line="250" column="12" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" bodystart="250" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1a31258ad089c6f847c8cd636cd72d6949" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tf::cuda_get_runtime_version</definition>
        <argsstring>()</argsstring>
        <name>cuda_get_runtime_version</name>
        <briefdescription>
<para>queries the CUDA Runtime version (1000 * major + 10 * minor) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" line="262" column="12" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_device.hpp" bodystart="262" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1a1effcf929b7e488925f9e12d74c8c62b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::cuda_get_free_mem</definition>
        <argsstring>(int d)</argsstring>
        <name>cuda_get_free_mem</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>queries the free memory (expensive call) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_memory.hpp" line="19" column="15" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_memory.hpp" bodystart="19" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1a58bbc8d5d955582d6b5f7fdac51d010b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::cuda_get_total_mem</definition>
        <argsstring>(int d)</argsstring>
        <name>cuda_get_total_mem</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>queries the total available memory (expensive call) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_memory.hpp" line="31" column="15" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_memory.hpp" bodystart="31" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1a6f04fd3168c45eeb2dffb223e5c81e45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* tf::cuda_malloc_device</definition>
        <argsstring>(size_t N, int d)</argsstring>
        <name>cuda_malloc_device</name>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>allocates memory on the given device for holding <computeroutput>N</computeroutput> elements of type <computeroutput>T</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para>The function calls <computeroutput>cudaMalloc</computeroutput> to allocate <computeroutput>N*sizeof(T)</computeroutput> bytes of memory on the given device <computeroutput>d</computeroutput> and returns a pointer to the starting address of the device memory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_memory.hpp" line="48" column="3" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_memory.hpp" bodystart="48" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1ab9b68b8f4336f13b190d573969cb1cf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* tf::cuda_malloc_device</definition>
        <argsstring>(size_t N)</argsstring>
        <name>cuda_malloc_device</name>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>allocates memory on the current device associated with the caller </para>
        </briefdescription>
        <detaileddescription>
<para>The function calls cuda_malloc_device from the current device associated with the caller. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_memory.hpp" line="65" column="3" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_memory.hpp" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1a8eed05685b030fc44703213a4ef86f11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* tf::cuda_malloc_shared</definition>
        <argsstring>(size_t N)</argsstring>
        <name>cuda_malloc_shared</name>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>allocates shared memory for holding <computeroutput>N</computeroutput> elements of type <computeroutput>T</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para>The function calls <computeroutput>cudaMallocManaged</computeroutput> to allocate <computeroutput>N*sizeof(T)</computeroutput> bytes of memory and returns a pointer to the starting address of the shared memory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_memory.hpp" line="76" column="3" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_memory.hpp" bodystart="76" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1ac7a8fe7456b888d6072ba94783c5003c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::cuda_free</definition>
        <argsstring>(T *ptr, int d)</argsstring>
        <name>cuda_free</name>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>frees memory on the GPU device </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>device pointer to memory to free </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>device context identifier</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This methods call <computeroutput>cudaFree</computeroutput> to free the memory space pointed to by <computeroutput>ptr</computeroutput> using the given device context. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_memory.hpp" line="96" column="6" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_memory.hpp" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1ae174a3a49b91ef21554dac16806f0d72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::cuda_free</definition>
        <argsstring>(T *ptr)</argsstring>
        <name>cuda_free</name>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>frees memory on the GPU device </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>device pointer to memory to free</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This methods call <computeroutput>cudaFree</computeroutput> to free the memory space pointed to by <computeroutput>ptr</computeroutput> using the current device context of the caller. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_memory.hpp" line="111" column="6" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_memory.hpp" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1aa4266474b921f8ed7d9ec8071fded2a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::cuda_memcpy_async</definition>
        <argsstring>(cudaStream_t stream, void *dst, const void *src, size_t count)</argsstring>
        <name>cuda_memcpy_async</name>
        <param>
          <type>cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>copies data between host and device asynchronously through a stream </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>stream identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination memory address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>source memory address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>size in bytes to copy</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The method calls <computeroutput>cudaMemcpyAsync</computeroutput> with the given <computeroutput>stream</computeroutput> using <computeroutput>cudaMemcpyDefault</computeroutput> to infer the memory space of the source and the destination pointers. The memory areas may not overlap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_memory.hpp" line="127" column="13" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_memory.hpp" bodystart="127" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1a6615554d2954e895755411ee444d9760" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::cuda_memset_async</definition>
        <argsstring>(cudaStream_t stream, void *devPtr, int value, size_t count)</argsstring>
        <name>cuda_memset_async</name>
        <param>
          <type>cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>devPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>initializes or sets GPU memory to the given value byte by byte </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>stream identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>devPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to GPU mempry </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to set for each byte of the specified memory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>size in bytes to set</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The method calls <computeroutput>cudaMemsetAsync</computeroutput> with the given <computeroutput>stream</computeroutput> to fill the first <computeroutput>count</computeroutput> bytes of the memory area pointed to by <computeroutput>devPtr</computeroutput> with the constant byte value <computeroutput>value</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_memory.hpp" line="148" column="13" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_memory.hpp" bodystart="148" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1a96ea342b1ceb44b100474304e68887b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacetf_1a632bb71dc4ddedbf2c26f6f25a2d6a49" kindref="member">cudaPerThreadStreamPool</ref> &amp;</type>
        <definition>cudaPerThreadStreamPool&amp; tf::cuda_per_thread_stream_pool</definition>
        <argsstring>()</argsstring>
        <name>cuda_per_thread_stream_pool</name>
        <briefdescription>
<para>acquires the per-thread cuda stream pool </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="50" column="32" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1a3f758baaa29221219bcbd10937dd5fd2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacetf_1a7356453a9963094ac069f6597bee50cd" kindref="member">cudaPerThreadEventPool</ref> &amp;</type>
        <definition>cudaPerThreadEventPool&amp; tf::cuda_per_thread_event_pool</definition>
        <argsstring>()</argsstring>
        <name>cuda_per_thread_event_pool</name>
        <briefdescription>
<para>per-thread cuda event pool </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="185" column="31" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1af21fe1eaf680dbddc0503ef5d1a9a664" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tf::to_string</definition>
        <argsstring>(cudaTaskType type)</argsstring>
        <name>to_string</name>
        <param>
          <type><ref refid="namespacetf_1afebc56ae6d5765010d0dd13a5f04132e" kindref="member">cudaTaskType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>convert a cuda_task type to a human-readable string </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_task.hpp" line="35" column="22" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_task.hpp" bodystart="35" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1a9cca69f61d792afb3ad501b703d795c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream&amp; tf::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const cudaTask &amp;ct)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classtf_1_1cudaTask" kindref="compound">cudaTask</ref> &amp;</type>
          <declname>ct</declname>
        </param>
        <briefdescription>
<para>overload of ostream inserter operator for <ref refid="classtf_1_1cudaTask" kindref="compound">cudaTask</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_task.hpp" line="219" column="8" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_task.hpp" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1ae680bf7822f2b6b66a6199f0b77f7241" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>constexpr size_t tf::cuda_default_max_threads_per_block</definition>
        <argsstring>()</argsstring>
        <name>cuda_default_max_threads_per_block</name>
        <briefdescription>
<para>queries the maximum threads allowed per block </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_capturer.hpp" line="19" column="18" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_capturer.hpp" bodystart="19" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1a50a8f777333cc26d5f5d8c4d37bcdc73" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>constexpr size_t tf::cuda_default_threads_per_block</definition>
        <argsstring>(size_t N)</argsstring>
        <name>cuda_default_threads_per_block</name>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>queries the default number of threads per block in an 1D vector of N elements </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_capturer.hpp" line="26" column="18" bodyfile="/Users/twhuang/Code/taskflow/taskflow/cuda/cuda_capturer.hpp" bodystart="26" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespacetf_1a30fa078dcf625e9eada5a95af1467588" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tf::version</definition>
        <argsstring>()</argsstring>
        <name>version</name>
        <briefdescription>
<para>queries the version information in a string format <computeroutput>major.minor.patch</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/Code/taskflow/taskflow/taskflow.hpp" line="50" column="22" bodyfile="/Users/twhuang/Code/taskflow/taskflow/taskflow.hpp" bodystart="50" bodyend="52"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>taskflow namespace </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/twhuang/Code/taskflow/taskflow/core/flow_builder.hpp" line="10" column="1"/>
  </compounddef>
</doxygen>
